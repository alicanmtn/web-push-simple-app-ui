var settingsRD = {
    defaultCookie:"#defaultCookie#",
    webSiteAddress:"#webSiteAddress#",
    relatedAppAlias:"#relatedAppAlias#",
    relatedAppSafariAlias:"#relatedAppSafariAlias#",
    rdWebSitePushID:"#rdWebSitePushID#",
    brandedSubDomain:"#brandedSubDomain#",
    safariPushApi:"#safariPushApi#",
    subscriptionUrl: "#subscriptionUrl#",
    defaultLanguage:"#defaultLanguage#",
    defaultTitle:"#defaultTitle#",
    defaultMessage:"#defaultMessage#",
    defaultIcon:"#defaultIcon#",
    isHttp: #isHttp#,
    autoRegister: #autoRegister#,
    isOptIn: #isOptIn#,
    optInNotify: {
        theme:"#theme#",
        scrollThreshold: #scrollThreshold#,
        background:"#backgroundcolor#",
        position: { v:"#pver#", h:"#phor#" },
        leftpadding:"#leftpadding#",
        rightpadding:"#rightpadding#",
        delay:"#optindelay#",
        title:"#optintitle#",
        message:"#optinmessage#",
        denytimespan:"#denytimespan#",
        allowButton: {
            bgcolor:"#allowbgcolor#",
            fontcolor:"#allowfontcolor#",
            text:"#allowtext#"
        },
        denyButton: {
            bgcolor:"#denybgcolor#",
            fontcolor:"#denyfontcolor#",
            text:"#denytext#"
        }
    },
    welcomeNotification: {
        enable:"#wnenable#",
        title:"#wntitle#",
        message:"#wnmessage#",
        icon:"#wnicon#",
        actionsButton: "",
        url:"#wnurl#",
        utmparams:"#wnutmparams#"
    },
    pubkey : "#pubkey#"
};

'use strict';
var subData = null;
function rdReceiveMessage(event){
    if(settingsRD.brandedSubDomain !== "" && event.origin.indexOf(settingsRD.brandedSubDomain)>-1){
        subData = JSON.parse(event.data);
        db.Update(subData);
        var rdObject = {};
        rdObject.subs = {};
        rdObject.extra = {};
        rdObject.extra.userinfo = RDActive.idOfUser;
        rdObject.action = "Accept";
        rdObject.channel = 2;
        rdObject.appKey = RDActive.appID;
        rdObject.subs.keys = {};
        rdObject.brw = subData.brw;
        rdObject.subs.token = subData.token;
        rdObject.subs.keys.p256dh = subData.p256dh;
        rdObject.subs.keys.auth = subData.auth;
        rdObject.version = "2.0";
        RDActive.postToServer(settingsRD.subscriptionUrl,rdObject);
        RDActive.postToVis(subData.token);
    }
}

window.addEventListener("message",rdReceiveMessage,false);

var RelatedPushSdk;
RelatedPushSdk = function () {
    this.ownHost = false;
    this.idOfUser = "";
    this.swRegistration = null;
    this.appID = "";
    this.protocol = document.location.protocol.split(":")[0];
    this.autoRegister = false;
    this.isSafari = false;
    this.isOthers = false;
    this.notifySettings = {};
    this.welcomeSettings = {};
    this.isSubscribed = false;
    this.denyAll = false;
    this.isHttps = false;
    this.dbTimeSpan = 120*1000; // 2 minutes
    this.denyTimeSpan = 0;
    this.vlTokenCo = "OM_TEMP_sys_TokenID";
    this.vlAliasCo = "OM_TEMP_sys_AppID";
    this.vlTokenPa = "OM.sys.TokenID";
    this.vlAliasPa = "OM.sys.AppID";
    this.pubkey = (settingsRD.hasOwnProperty("pubkey") && settingsRD.pubkey !== "") ? settingsRD.pubkey : "";
    this.vapidPublicKey = "";
    
    this.initSettings = function () {
        this.whichBrowser = this.getWhichBrowser();
        this.denyTimeSpan = this.getDenyTimeSpan();
        this.isHttps = this.getHttpOrHttps();
        this.ownHost = this.getPermWhere();
        this.appID = this.getAppID();
        if (this.pubkey == "")
			this.addManifest();
		else
			this.vapidPublicKey = this.urlBase64ToUint8Array(this.pubkey);
        this.idOfUser = this.getUserID();
        this.autoRegister = this.getAutoRegister();
        this.safariPushID = settingsRD.rdWebSitePushID;
        this.ControlPermission();
        this.notifySettings = this.getNotifySettings();
        this.getSubscribeSettings();
    };

    this.urlBase64ToUint8Array = function(base64String){
        const padding = '='.repeat((4 - base64String.length % 4) % 4);
        const base64 = (base64String + padding)
            .replace(/-/g, '+')
            .replace(/_/g, '/');
        const rawData = window.atob(base64);
        const outputArray = new Uint8Array(rawData.length);
        for (let i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
        }
        return outputArray;
    };

    this.getDenyTimeSpan = function(){
        var day_webpush_deny = 36*24*10e4;
        if(settingsRD.isOptIn){
            var delay_time_webpush = parseInt(settingsRD.optInNotify.denytimespan);
            if(typeof  delay == "number"){
                day_webpush_deny = day_webpush_deny*delay_time_webpush;
            }
        }
        return day_webpush_deny;
    };
    this.getAppID = function () {
        var value = "";
        if (bowser.name === "Safari" && bowser.mac) {
            this.isSafari = true;
            value = settingsRD.relatedAppSafariAlias;
        }
        else if (bowser.name === "iPad" || bowser.name === "iPhone" || bowser.ios) {
            this.denyAll = true;
        }
        else if (
            (
                bowser.name === "Chrome" ||
                bowser.name === "Firefox" ||
                bowser.name === "Chromium" ||
                bowser.name === "Samsung Internet for Android") &&
            !bowser.ios
        ) {
            this.isSafari = false;
            this.isOthers = true;
            value = settingsRD.relatedAppAlias;
        }
        else if(bowser.name === "Opera"){
            this.isOthers = true;
            this.isSafari = false;
            value = settingsRD.relatedAppAlias;
        }
        else {
            this.denyAll = true;
        }
        return value;
    };
    this.getUserID = function () {
        var id = this.getCookie(settingsRD.defaultCookie);
        id = id.replace("%40","@").replace("%20"," ");
        if(id === ""){
            if(typeof Visilabs !== "undefined"){
                var vl = new Visilabs();
                if(vl.Parameters["OM.exVisitorID"]){
                    id = vl.Parameters["OM.exVisitorID"].replace("%40","@").replace("%20"," ");
                }
            }
        }
        return id;
    };
    this.getAutoRegister = function (){
        if(this.ownHost){
            return true;
        }
        else{
            return settingsRD.autoRegister;
        }

    };
    this.getSubscribeSettings = function(){
        if(this.isSafari && settingsRD.rdWebSitePushID !== ""){
            if(Notification.permission === "granted"){
                if('safari' in window && 'pushNotification' in window.safari){
                    var permissionData = window.safari.pushNotification.permission(this.safariPushID);
                    this.registerSafari(permissionData);
                }
            }
            else if(Notification.permission === "default"){
                this.RDPopUpCenter(settingsRD.optInNotify.theme);
            }else {
                console.warn("permission denied")
            }
        }
        else if(this.isOthers){
            if(settingsRD.isHttp){
                this.RDPopUpCenter(settingsRD.optInNotify.theme);
            }
            else{
                if(settingsRD.isOptIn && this.isHttps){
                    this.updateServiceWorker();
                    this.RDPopUpCenter(settingsRD.optInNotify.theme);
                }
                else{
                    if((Notification.permission === "granted" || Notification.permission === "default") && this.isHttps){
                        this.updateServiceWorker();
                        this.registerServiceWorker(Notification.permission);
                    }
                    else{
                        console.warn("permission denied or site is not https.")
                    }
                }
            }
        }
    };
    this.createPermWindow = function(){
        var self = this;
        var protocol = "https://";
        if(settingsRD.brandedSubDomain.indexOf("localhost") > -1)
            protocol = "http://";
        var url = protocol+settingsRD.brandedSubDomain;
        var popup = window.open(url,"Web Push","width=600,height=400");
        setTimeout(function(){self.sendMessage(popup)},100);
    };
    this.subscriptionUpdater = function(){
        if(this.isSafari){
            if(Navigator.permission === "granted"){

            }
            else if(Navigator.permission === "default"){

            }
            else{

            }
        }
        else if(this.isOthers){
            if(Navigator.permission === "granted"){

            }
            else if(Navigator.permission === "default"){

            }
            else{

            }
        }
    };
    this.ControlPermission = function(){
        var self = this;
        if(this.isHttps && !settingsRD.isHttp){
            db.ControlSettings(self);
        }
    };

    this.registerServiceWorker = function(method){
        var self = this;
        if(method === "default"){
            if('serviceWorker' in navigator && 'PushManager' in window){
                console.info("Service Worker and Push is supported");
                navigator.serviceWorker.register('/relatedpush_sw.js');
                navigator.serviceWorker.ready
                    .then(function(sw){
                        console.info("Service Worker registered");
                        self.swRegistration = sw;
                        self.subScribeUser(sw);
                    })
                    .catch(function(err){
                        console.warn("Service Worker error:",err);
                    });
            }
            else{
                console.warn("Service worker or Push is not supported");
            }
        }
        else if(method === "granted"){
            if('serviceWorker' in navigator && 'PushManager' in window){
                console.info("Service Worker and Push is supported");
                navigator.serviceWorker.register('/relatedpush_sw.js');
                navigator.serviceWorker.ready
                    .then(function(sw){
                        console.info("Service Worker registered");
                        self.swRegistration = sw;
                        self.checkSubscribe(sw);
                    })
                    .catch(function(err){
                        console.warn("Service Worker error:",err);
                    });
            }
            else{
                console.warn("Service worker or Push is not supported");
            }
        }
        else{
            var data = {};
            data.permission = "denied";
            db.Update(data);
            console.log("push notification denied");
        }
    };

    this.updateServiceWorker = function () {
        var sw = "/relatedpush_sw.js";
        db.ServiceWorkerUpdate(sw);
    };

    this.registerSafari = function(data){
        if(data.permission === "default"){
            window.safari.pushNotification.requestPermission(
                settingsRD.safariPushApi,
                this.safariPushID,
                {"userinfo":this.idOfUser},
                function(data){RDActive.registerSafari(data)});
        }
        else if(data.permission === "granted"){
            this.updateSubscriptionOnServer(data);
        }
    };

    this.checkSafariSubscribe = function(data){
        var self = this;
        if(data.token !== null)
            db.getSubsUpdate(data,self,sw);
    };

    this.postToVis = function(token){
        if(typeof(Visilabs) !== "undefined"){
            var vl = new Visilabs();
            vl.AddParameter(this.vlAliasPa,this.appID);
            vl.AddParameter(this.vlTokenPa,token);
            vl.AddParameter("OM.uri","/om.gif");
            vl.Collect();
        }
    };

    this.subScribeUser = function(sw){
        var self = this;
        var subscribeObject = {userVisibleOnly: true};
		if ( self.vapidPublicKey !== "" )
		{
			subscribeObject.applicationServerKey = self.vapidPublicKey;
		}
        if(sw){
            sw.pushManager.subscribe(subscribeObject)
            .then(function(subscription){
                self.updateSubscriptionOnServer(subscription);
            })
            .catch(function (err) {
                console.warn("Failed to subscribe the user",err);
                sw.pushManager.getSubscription()
                    .then(function(subscription) {
					    console.log("subs : "  + subscription);
                        subscription.unsubscribe()
                            .then(function(successful) {
                                console.log("unsubscribe success :"  + successful);
                                db.clearDB();
                                self.getSubscribeSettings();
                            })
                            .catch(function(err) {
                                console.log("unsubscribe failed :"  + err);
                            })
                    })
                    .catch(function(err){
                        console.log("subscribtion get failed :"  + err);
                    });
            });
        }
    };

    this.checkSubscribe = function(sw){
        var self = this;
        if(sw)
            db.getSubsUpdate(this.dbTimeSpan,self,sw);
        else
            console.log("service worker data not found");
    };

    this.getPermWhere = function(){
        var value = false;
        var a = settingsRD.brandedSubDomain !== document.location.host+document.location.pathname ;
        var b = settingsRD.brandedSubDomain !== document.location.host;
        var c = settingsRD.brandedSubDomain !== document.location.hostname;
        if(settingsRD.isHttp){
            if(b)
                value = true;
        }
        return value;
    };

    this.updateSubscriptionOnServer = function(subs){
        var temp = JSON.stringify(subs);
        var dbdata = {};
        console.info("Default :",temp);
        var json_subs = JSON.parse(temp);
        var rdWebObject = {};
        rdWebObject.extra = {};
        rdWebObject.subs = {};
        rdWebObject.extra.userinfo = this.idOfUser;
        rdWebObject.action = "Accept";
        rdWebObject.channel = 2;
        rdWebObject.appKey = this.appID;
        rdWebObject.brw = this.whichBrowser;
        dbdata.brw = rdWebObject.brw;
        if(this.isSafari) {
            rdWebObject.subs.token = subs.deviceToken;
            dbdata.token = subs.deviceToken;
            dbdata.permission = "granted";
        }
        else {
            rdWebObject.subs.keys = {};
            rdWebObject.subs.token = subs.endpoint.split("/").slice(-1)[0];
            rdWebObject.subs.keys.p256dh = json_subs.keys.p256dh;
            rdWebObject.subs.keys.auth = json_subs.keys.auth;
            dbdata.token = subs.endpoint.split("/").slice(-1)[0];
            dbdata.p256dh = json_subs.keys.p256dh;
            dbdata.auth = json_subs.keys.auth;
            dbdata.permission = "granted";
        }
        rdWebObject.version = "2.0";
        if(this.isSafari){
            this.postToServerSafari(settingsRD.subscriptionUrl,rdWebObject);
        }
        else {
            this.postToServer(settingsRD.subscriptionUrl, rdWebObject);
        }
        this.postToVis(dbdata.token);
        db.Update(dbdata);
    };
    this.sendAsycSubs = function (data) {
        var rdWebObject = {};
        rdWebObject.subs = {};
        rdWebObject.extra = {};
        rdWebObject.extra.userinfo = this.idOfUser;
        rdWebObject.action = "Accept";
        rdWebObject.channel = 2;
        rdWebObject.appKey = this.appID;
        rdWebObject.subs.token = data.token;
        if(data.brw !== null){
            rdWebObject.brw = data.brw;
        }
        else{
            rdWebObject.brw = this.whichBrowser;
        }
        if(data.auth !== "" && data.p256dh !== ""){
            rdWebObject.subs.keys = {};
            rdWebObject.subs.keys.p256dh = data.p256dh;
            rdWebObject.subs.keys.auth = data.auth;
        }
        rdWebObject.version = "2.0";
        if(this.isSafari){
            this.postToServerSafari(settingsRD.subscriptionUrl,rdWebObject);
        }
        else{
            this.postToServer(settingsRD.subscriptionUrl,rdWebObject);
        }
        this.postToVis(data.token);
        var visilabsToken = {}
        visilabsToken.appid = this.isSafari ? settingsRD.relatedAppSafariAlias : settingsRD.relatedAppAlias;
        visilabsToken.token = rdWebObject.subs.token;
        RDigiSetVisilabsToken(visilabsToken);
    };
    this.addManifest = function(){
        if(!settingsRD.isHttp && this.isHttps && this.isOthers){
            var url = "";
            if(settingsRD.manifestName !== undefined && settingsRD.manifestName !== ""){
                if(settingsRD.manifestName !== "#manifestName#")
                    url = "/"+settingsRD.manifestName;
                else
                    url = "/manifest.json";
            }
            else{
                url = "/manifest.json";
            }
            var tempUrl = document.querySelector('link[rel="manifest"]');
            if(tempUrl !== null){
                console.log(tempUrl.href);
            }
            try{
                var http = new XMLHttpRequest();
                http.open('HEAD', url, true);
                http.send();
                if(http.status !== 404){
                    var link = document.createElement("link");
                    link.rel = "manifest";
                    link.href = url;
                    var elem = document.head;
                    elem.insertBefore(link,elem.firstChild);
                }
                else{
                    console.warn("manifest file not found.");
                }
            }
            catch(err){
                console.log(err);
            }

        }
    };

    this.createPostData = function(data){
        var perminfo = {};
        perminfo.auth = data.auth;
        perminfo.p256dh = data.p256dh;
        perminfo.token = data.token;
        return JSON.stringify(perminfo);
    };

    this.sendMessage = function(popup){
        var brandProtocol = "https://";
        if(settingsRD.brandedSubDomain.indexOf("localhost")>-1)
            brandProtocol = "http://";
        var targetUrl = brandProtocol+settingsRD.brandedSubDomain;
        if(popup !== null && subData == null ){
            setTimeout(function(){
                try{
                    popup.postMessage(this.idOfUser,targetUrl);
                }
                catch(err){

                }
                RDActive.sendMessage(popup);},300);
        }
    };

    this.getNotifySettings = function(){
        return settingsRD.optInNotify;
    };
    this.getHttpOrHttps = function(){
        if(document.location.host.indexOf("localhost")>-1)
            return true;
        else
            return this.protocol === "https";
    };
    this.getCookie = function(a){
        a += "=";
        for (var c = document.cookie.split(";"), d = 0; d < c.length; d++) {
            for (var b = c[d]; " " === b.charAt(0); )
                b = b.substring(1);
            if (0 === b.indexOf(a))
                return b.substring(a.length, b.length);
        }
        return ""
    };
    this.setCookie = function(data){

    };
    this.postToServer = function(endpoint,body){
        var header = new Headers();
        header.append("Content-Type","application/json;charset=UTF-8");
        fetch(endpoint,{
            method: 'POST',
            mode: 'no-cors',
            headers: header,
            body: JSON.stringify(body)
        });
    };

    this.postToServerSafari = function (endpoint,body) {
        var http = new XMLHttpRequest();
        var url = endpoint;
        var params = body;
        http.open("POST",url,true);
        http.send(JSON.stringify(params));
    };

    this.getWhichBrowser = function(){
        var value = bowser.name;
        if(value === "Chrome" || value === "Chromium" || value === "Samsung Internet for Android")
            return "C";
        else if(value === "Opera")
            return "O";
        else if(value === "Firefox")
            return "F";
        else if(value === "Safari")
            return "S";
        else {
            console.log("Browser not categorized ," + value);
            return "";
        }
    };

    function getWindowHeight() {
        return window.innerHeight || 
               document.documentElement.clientHeight ||
               document.body.clientHeight || 0;
    }
    
    function getWindowYscroll() {
        return window.pageYOffset || 
               document.body.scrollTop ||
               document.documentElement.scrollTop || 0;
    }
    
    function getDocHeight() {
        return Math.max(
            document.body.scrollHeight || 0, 
            document.documentElement.scrollHeight || 0,
            document.body.offsetHeight || 0, 
            document.documentElement.offsetHeight || 0,
            document.body.clientHeight || 0, 
            document.documentElement.clientHeight || 0
        );
    }
    
    function getScrollPercentage() {
        return (
            (getWindowYscroll() + getWindowHeight()) / getDocHeight()
        ) * 100;
    }

    this.RDPopUpCenter = function(theme){
        var self = this;
        if(getScrollPercentage() >= settingsRD.optInNotify.scrollThreshold){
            db.OptInSelect(self,theme);
        }else {
            window.addEventListener('scroll', function(){
                if(getScrollPercentage() >= settingsRD.optInNotify.scrollThreshold){
                    db.OptInSelect(self,theme);
                }
            })
        }
    };
    
    this.createPopUp = function(theme){
        if(theme === "Default")
            this.DefaultOptIn(settingsRD.optInNotify);
    };

    this.DefaultOptIn = function(notifyObject){
        var self = this;
        console.info("optin trigger");
        var vl_perm_box = document.createElement("div");

        var div_id_vl_perm_box = document.createAttribute("id");
        div_id_vl_perm_box.value = "visilabs_web_push_perm_box";
        vl_perm_box.setAttributeNode(div_id_vl_perm_box);

        var style_vl_perm_box = document.createAttribute("style");
        style_vl_perm_box.value = "position:fixed;height:250px;width:520px;top:1%;left:50%;margin-left:-275px;margin-top:1px;z-index:100000;";
        vl_perm_box.setAttributeNode(style_vl_perm_box);

        vl_perm_box.innerHTML = "<div class='vl-notif-inner' style='overflow:auto;width:520px;height:auto; display: table;'>" +
            "<div style='display: table-row;'><div class='vl-notif-logo'>" +
            "<img src='data:image/png;base64," + settingsRD.defaultIcon + "'>" +
            "</div>" +
            "<div class='vl-notif-msg'>" +
            "<h3 class='vl-notif-title'>" + notifyObject.title + "</h3>" +
            "<p class='vl-notif-message'>" + notifyObject.message + "</p> " +
            "<div class='vl-notif-buttons'><button class='vl-notif-delay' id='web_push_hayir'>" + settingsRD.optInNotify.denyButton.text + "</button><button id='web_push_evet' class='vl-notif-accept'>" + settingsRD.optInNotify.allowButton.text + "</button> </div>" +
            "</div> " +
            "</div>" +
            "</div>";
        document.body.appendChild(vl_perm_box);

        if(notifyObject.background == null){
            notifyObject.background = "#fff";
        }

        var style_in_perm = document.createElement("style");
        style_in_perm.innerHTML = ".vl-notif-msg {display: table-cell; width: 60%; padding: 10px; box-sizing: border-box; text-align: center; line-height: 1.4; vertical-align: middle;}" +
            ".vl-notif-inner{box-shadow: 0 3px 10px 0 rgba(0, 0, 0, 0.43) !important;background:" + notifyObject.background + ";border: 1px solid #EAEAEA;max-width: 520px;border-radius: 3px;}" +
            ".vl-notif-title{background: none;font-family: Tahoma, Geneva, sans-serif;font-size: 17px;font-weight: bold;margin: 0; padding: 0;}" +
            ".vl-notif-message{background: none;font-size: 15px;font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;padding: 0;margin: 12px 0;}" +
            ".vl-notif-logo{display: table-cell;width: 35%;padding: 10px;} " +
            ".vl-notif-logo img{width:100%}" +
            ".vl-notif-buttons button{padding: 8px 15px;margin-left: 15px;font-size: 15px;text-align: center;border: 1px solid transparent;border-radius: 4px;background-color: #fff;border-color: #333;}" +
            ".vl-notif-buttons button:hover{color:#333;background-color:#e6e6e6;border-color:#adadad;}" +
            ".vl-notif-buttons .vl-notif-accept{background-color:" + settingsRD.optInNotify.allowButton.bgcolor + ";color:" + settingsRD.optInNotify.allowButton.fontcolor + ";border-color:transparent;}" +
            ".vl-notif-buttons .vl-notif-delay{background-color:" + settingsRD.optInNotify.denyButton.bgcolor + ";color:" + settingsRD.optInNotify.denyButton.fontcolor + ";border-color:transparent;}" +
            "@media only screen and (max-width: 767px){#visilabs_web_push_perm_box{ width: 94% !important;margin-left: -47% !important;} .vl-notif-inner{width: 100% !important;max-width: 100%;} .vl-notif-title{font-size: 12px;} .vl-notif-message{font-size: 11px;} .vl-notif-buttons button{padding: 5px 10px;margin-left: 15px;font-size: 12px;}}";
        vl_perm_box.appendChild(style_in_perm);

        self.buttonBehavior();

    };
    this.buttonBehavior = function(){
        var self = this;
        document.getElementById("web_push_hayir").onclick = function () {
            console.log("web push reddedildi");
            var data = {optIn:opt_webpush_value[1]};
            db.OptInInsert(data);

            self.closePermBox();
        };
        document.getElementById("web_push_evet").onclick = function () {
            console.log("web push kabul edildi");
            self.closePermBox();
            var data = {optIn:opt_webpush_value[0]};
            if(self.isSafari){
                var permissionData = window.safari.pushNotification.permission(self.safariPushID);
                self.registerSafari(permissionData);
            }
            else{
                if(settingsRD.isHttp)
                    self.createPermWindow();
                else{
                    self.registerServiceWorker(Notification.permission);
                }
            }
            db.OptInInsert(data);
        }
    };
    this.closePermBox = function(){
        var close_perm_box = document.getElementById("visilabs_web_push_perm_box");
        close_perm_box.style.display = "none";
    };
};
var opt_webpush_value = {
    0:"accept",
    1:"deny"
};
var rdDbCenter;
rdDbCenter = function () {
    this.token = "";
    this.auth = "";
    this.p256dh = "";
    this.permission = "";
    relatedforage.config({
        driver: relatedforage.LOCALSTORAGE,
        name: settingsRD.relatedAppAlias
    });
    this.OptInInsert = function (data) {
        if (data.hasOwnProperty("optIn")) {
            relatedforage.setItem("optIn", data.optIn);
            if (data.optIn === opt_webpush_value[1]) {
                var delayDeny = new Date();
                delayDeny = delayDeny.getTime();
                relatedforage.setItem("denyDelay", delayDeny);
            }
        }
    };

    this.ControlSettings = function (self) {
        var permission = Notification.permission;
        relatedforage.getItem("permission").then(function (perm) {
            if (perm === null) {

            } else if (perm === "granted") {
                if (permission === "default") {
                    relatedforage.removeItem("permission");
                    relatedforage.removeItem("token");
                    relatedforage.removeItem("optIn");
                    relatedforage.removeItem("auth");
                    relatedforage.removeItem("p256dh");
                    relatedforage.removeItem("acceptTimespan");
                    relatedforage.removeItem("optInView");
                    relatedforage.removeItem("optInVisitTime");
                    relatedforage.removeItem("acceptTimespan");
                    RDigiRemoveItem("OM.visilabspush");
                } else if (permission === "denied") {
                    relatedforage.setItem("permission", "denied");
                    relatedforage.removeItem("token");
                    relatedforage.removeItem("optIn");
                    relatedforage.removeItem("auth");
                    relatedforage.removeItem("p256dh");
                    RDigiRemoveItem("OM.visilabspush");
                }
            } else if (perm === "denied") {
                if (permission === "default" || permission === "granted") {
                    relatedforage.removeItem("permission");
                    relatedforage.removeItem("token");
                    relatedforage.removeItem("optIn");
                    relatedforage.removeItem("auth");
                    relatedforage.removeItem("p256dh");
                    relatedforage.removeItem("acceptTimespan");
                    relatedforage.removeItem("optInView");
                    relatedforage.removeItem("optInVisitTime");
                    RDigiRemoveItem("OM.visilabspush");
                }
            }
        })
    };

    this.OptInSelect = function (self, theme) {
        relatedforage.getItem("optIn").then(function (value) {
            if (value === null) {
                var a = new Date();
                a = a.getTime();
                relatedforage.getItem("permission").then(function (perm) {
                    if (perm === "denied") {
                        console.log("permission denied");
                    } else {
                        relatedforage.getItem("optInView").then(function (view) {
                            if (view > 0) {
                                relatedforage.getItem("optInVisitTime").then(function (timeD) {
                                    if (a - timeD > self.dbTimeSpan) {
                                        self.createPopUp(theme);
                                        relatedforage.setItem("optInView", 1);
                                        relatedforage.setItem("optInVisitTime", a);
                                    }
                                });
                            } else {
                                self.createPopUp(theme);
                                relatedforage.setItem("optInView", 1);
                                relatedforage.setItem("optInVisitTime", a);
                            }
                        });
                    }
                });

            } else if (value === opt_webpush_value[0]) {
                var isSend = false;
                relatedforage.getItem("permission").then(function (perm) {
                    if (perm === "granted") {
                        var items = ["token", "auth", "p256dh", "acceptTimespan", "brw"];
                        var promises = items.map(function (item) {
                            return relatedforage.getItem(item);
                        });
                        Promise.all(promises).then(function (results) {
                            var a = new Date();
                            a = a.getTime();
                            if (results[0] !== null) {
                                if (results[3] !== null) {
                                    if (a - results[3] > self.dbTimeSpan) {
                                        isSend = true;
                                    }
                                } else {
                                    isSend = true;
                                }
                            } else {
                                //todo token null ise accept var ise
                                if (self.isSafari) {
                                    relatedforage.removeItem("acceptTimespan");
                                    var permissionData = window.safari.pushNotification.permission(self.safariPushID);
                                    self.registerSafari(permissionData);
                                } else {
                                    if (!settingsRD.isHttp) {
                                        relatedforage.removeItem("acceptTimespan");
                                        self.registerServiceWorker(Notification.permission);
                                    }
                                }
                            }
                            if (isSend) {
                                var token = results[0];
                                var auth = "";
                                var p256dh = "";
                                if (results[1] !== null && results[2] !== null) {
                                    auth = results[1];
                                    p256dh = results[2];
                                }
                                var data = {};
                                data.token = token;
                                data.auth = auth;
                                data.p256dh = p256dh;
                                data.brw = results[4];
                                self.sendAsycSubs(data);
                                relatedforage.setItem("acceptTimespan", a);
                            }
                        });
                    } else if (perm === null) {
                        if (self.isSafari) {
                            relatedforage.removeItem("acceptTimespan");
                            var permissionData = window.safari.pushNotification.permission(self.safariPushID);
                            self.registerSafari(permissionData);
                        } else {
                            if (!settingsRD.isHttp) {
                                relatedforage.removeItem("acceptTimespan");
                                self.registerServiceWorker(Notification.permission);
                            }
                        }
                    } else {
                        console.log("permission denied");
                    }
                });

            } else if (value === opt_webpush_value[1]) {
                relatedforage.getItem("denyDelay").then(function (value) {
                    var timespan = self.denyTimeSpan;
                    var a = new Date();
                    a = a.getTime();
                    if (a - value > timespan) {
                        self.createPopUp(theme);
                        relatedforage.setItem("denyDelay", a);
                    }
                });
            } else {

            }
        }).catch(function (err) {

        });
    };
    // work
    this.ServiceWorkerUpdate = function (sw) {
        relatedforage.getItem("updateHash").then(function (value) {
            var dtime = new Date();
            if (value === null) {

                dtime = dtime.getTime();
                navigator.serviceWorker.register(sw + "?" + dtime).then(function (value) {
                    console.log("update service worker");
                });
                relatedforage.setItem("updateHash", dtime);
            } else {
                dtime = dtime.getTime();
                if ((dtime - value) > 1080000) {
                    navigator.serviceWorker.register(sw + "?" + dtime).then(function (value) {
                        console.log("update service worker");
                    });
                    relatedforage.setItem("updateHash", dtime);
                }
            }
        });
    };
    this.Update = function (data) {
        if (data.hasOwnProperty("token")) {
            this.token = data.token;
        }
        if (data.hasOwnProperty("auth")) {
            this.auth = data.auth;
        }
        if (data.hasOwnProperty("p256dh")) {
            this.p256dh = data.p256dh;
        }
        if (data.hasOwnProperty("permission"))
            this.permission = data.permission;
        if (this.token !== "") {
            relatedforage.setItem("token", this.token);
            relatedforage.setItem("permission", this.permission);
            relatedforage.setItem("brw", data.brw);
            var timeAccept = new Date().getTime();
            relatedforage.setItem("acceptTimespan", timeAccept);
            var visilabsToken = {};
            visilabsToken.appid = this.isSafari ? settingsRD.relatedAppSafariAlias : settingsRD.relatedAppAlias;
            visilabsToken.token = this.token;
            if (this.auth !== "" && this.p256dh !== "") {
                relatedforage.setItem("auth", this.auth);
                relatedforage.setItem("p256dh", this.p256dh);
            }
            relatedforage.setItem("optIn", opt_webpush_value[0]);
            RDigiSetVisilabsToken(visilabsToken);
        } else if (this.permission === "denied") {
            relatedforage.setItem("permission", this.permission);
        }
    };

    this.getSubsUpdate = function (data, self, sw) {
        var delay = new Date();
        delay = delay.getTime();
        var items = ["acceptTimespan", "permission", "token"];
        /*
        var promises  = items.map(function(item) { return relatedforage.getItem(item); });
        Promise.all(promises).then(function(results){
            if(results[0] == null && results[1] != null)
        });*/
        relatedforage.getItem("acceptTimespan").then(function (value) {
            if (value == null || ((delay - value) > data)) {
                self.subScribeUser(sw);
                relatedforage.setItem("acceptTimespan", delay);
            }
        }).catch(function (err) {
            console.log("timespan error");
        })
    };
    this.clearDB = function() {
        relatedforage.clear();
    }
};

function RDigiSetItem(key,value){
    if(window.localStorage)
        localStorage.setItem(key,JSON.stringify(value));
}

function RDigiRemoveItem(key){
    if(window.localStorage)
        localStorage.removeItem(key);
}

function RDigiSetVisilabsToken(data){
    if(data && data.hasOwnProperty("appid") && data.hasOwnProperty("token"))
    {
        RDigiSetItem("OM.visilabspush",data);    
    }
};


/*!
 localForage -- Offline Storage, Improved
 Version 1.5.0
 https://localforage.github.io/localForage
 (c) 2013-2017 Mozilla, Apache License 2.0
 */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.relatedforage=t():e.relatedforage=t()}(window,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){(function(t){var r;e.exports=function e(t,n,o){function i(u,c){if(!n[u]){if(!t[u]){if(!c&&"function"==typeof r&&r)return r(u,!0);if(a)return a(u,!0);var f=new Error("Cannot find module '"+u+"'");throw f.code="MODULE_NOT_FOUND",f}var s=n[u]={exports:{}};t[u][0].call(s.exports,(function(e){return i(t[u][1][e]||e)}),s,s.exports,e,t,n,o)}return n[u].exports}for(var a="function"==typeof r&&r,u=0;u<o.length;u++)i(o[u]);return i}({1:[function(e,r,n){(function(e){"use strict";function t(){f=!0;for(var e,t,r=s.length;r;){for(t=s,s=[],e=-1;++e<r;)t[e]();r=s.length}f=!1}var n,o=e.MutationObserver||e.WebKitMutationObserver;if(o){var i=0,a=new o(t),u=e.document.createTextNode("");a.observe(u,{characterData:!0}),n=function(){u.data=i=++i%2}}else if(e.setImmediate||void 0===e.MessageChannel)n="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var r=e.document.createElement("script");r.onreadystatechange=function(){t(),r.onreadystatechange=null,r.parentNode.removeChild(r),r=null},e.document.documentElement.appendChild(r)}:function(){setTimeout(t,0)};else{var c=new e.MessageChannel;c.port1.onmessage=t,n=function(){c.port2.postMessage(0)}}var f,s=[];r.exports=function(e){1!==s.push(e)||f||n()}}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(e,t,r){"use strict";function n(){}function o(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=h,this.queue=[],this.outcome=void 0,e!==n&&c(this,e)}function i(e,t,r){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function a(e,t,r){s((function(){var n;try{n=t(r)}catch(t){return l.reject(e,t)}n===e?l.reject(e,new TypeError("Cannot resolve promise with itself")):l.resolve(e,n)}))}function u(e){var t=e&&e.then;if(e&&"object"==typeof e&&"function"==typeof t)return function(){t.apply(e,arguments)}}function c(e,t){function r(t){o||(o=!0,l.reject(e,t))}function n(t){o||(o=!0,l.resolve(e,t))}var o=!1,i=f((function(){t(n,r)}));"error"===i.status&&r(i.value)}function f(e,t){var r={};try{r.value=e(t),r.status="success"}catch(e){r.status="error",r.value=e}return r}var s=e(1),l={},d=["REJECTED"],v=["FULFILLED"],h=["PENDING"];t.exports=r=o,o.prototype.catch=function(e){return this.then(null,e)},o.prototype.then=function(e,t){if("function"!=typeof e&&this.state===v||"function"!=typeof t&&this.state===d)return this;var r=new this.constructor(n);return this.state!==h?a(r,this.state===v?e:t,this.outcome):this.queue.push(new i(r,e,t)),r},i.prototype.callFulfilled=function(e){l.resolve(this.promise,e)},i.prototype.otherCallFulfilled=function(e){a(this.promise,this.onFulfilled,e)},i.prototype.callRejected=function(e){l.reject(this.promise,e)},i.prototype.otherCallRejected=function(e){a(this.promise,this.onRejected,e)},l.resolve=function(e,t){var r=f(u,t);if("error"===r.status)return l.reject(e,r.value);var n=r.value;if(n)c(e,n);else{e.state=v,e.outcome=t;for(var o=-1,i=e.queue.length;++o<i;)e.queue[o].callFulfilled(t)}return e},l.reject=function(e,t){e.state=d,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},r.resolve=function(e){return e instanceof this?e:l.resolve(new this(n),e)},r.reject=function(e){var t=new this(n);return l.reject(t,e)},r.all=function(e){function t(e,t){r.resolve(e).then((function(e){a[t]=e,++u!==o||i||(i=!0,l.resolve(f,a))}),(function(e){i||(i=!0,l.reject(f,e))}))}var r=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var o=e.length,i=!1;if(!o)return this.resolve([]);for(var a=new Array(o),u=0,c=-1,f=new this(n);++c<o;)t(e[c],c);return f},r.race=function(e){function t(e){r.resolve(e).then((function(e){i||(i=!0,l.resolve(u,e))}),(function(e){i||(i=!0,l.reject(u,e))}))}var r=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var o=e.length,i=!1;if(!o)return this.resolve([]);for(var a=-1,u=new this(n);++a<o;)t(e[a]);return u}},{1:1}],3:[function(e,r,n){(function(t){"use strict";"function"!=typeof t.Promise&&(t.Promise=e(2))}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{2:2}],4:[function(e,t,r){"use strict";function n(e,t){e=e||[],t=t||{};try{return new Blob(e,t)}catch(o){if("TypeError"!==o.name)throw o;for(var r=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),n=0;n<e.length;n+=1)r.append(e[n]);return r.getBlob(t.type)}}function o(e,t){t&&e.then((function(e){t(null,e)}),(function(e){t(e)}))}function i(e,t,r){"function"==typeof t&&e.then(t),"function"==typeof r&&e.catch(r)}function a(e){return"string"!=typeof e&&(console.warn(e+" used as a key, but it is not a string."),e=String(e)),e}function u(e){for(var t=e.length,r=new ArrayBuffer(t),n=new Uint8Array(r),o=0;o<t;o++)n[o]=e.charCodeAt(o);return r}function c(e){return"boolean"==typeof E?O.resolve(E):function(e){return new O((function(t){var r=e.transaction(x,B),o=n([""]);r.objectStore(x).put(o,"key"),r.onabort=function(e){e.preventDefault(),e.stopPropagation(),t(!1)},r.oncomplete=function(){var e=navigator.userAgent.match(/Chrome\/(\d+)/),r=navigator.userAgent.match(/Edge\//);t(r||!e||parseInt(e[1],10)>=43)}})).catch((function(){return!1}))}(e).then((function(e){return E=e}))}function f(e){var t=j[e.name],r={};r.promise=new O((function(e){r.resolve=e})),t.deferredOperations.push(r),t.dbReady?t.dbReady=t.dbReady.then((function(){return r.promise})):t.dbReady=r.promise}function s(e,t){return new O((function(r,n){if(e.db){if(!t)return r(e.db);f(e),e.db.close()}var o=[e.name];t&&o.push(e.version);var i=I.open.apply(I,o);t&&(i.onupgradeneeded=function(t){var r=i.result;try{r.createObjectStore(e.storeName),t.oldVersion<=1&&r.createObjectStore(x)}catch(r){if("ConstraintError"!==r.name)throw r;console.warn('The database "'+e.name+'" has been upgraded from version '+t.oldVersion+" to version "+t.newVersion+', but the storage "'+e.storeName+'" already exists.')}}),i.onerror=function(e){e.preventDefault(),n(i.error)},i.onsuccess=function(){r(i.result),function(e){var t=j[e.name].deferredOperations.pop();t&&t.resolve()}(e)}}))}function l(e){return n([u(atob(e.data))],{type:e.type})}function d(e){return e&&e.__local_forage_encoded_blob}function v(e){var t=this,r=t._initReady().then((function(){var e=j[t._dbInfo.name];if(e&&e.dbReady)return e.dbReady}));return i(r,e,e),r}function h(e){f(e);for(var t=j[e.name].forages,r=0;r<t.length;r++)t[r]._dbInfo.db&&(t[r]._dbInfo.db.close(),t[r]._dbInfo.db=null);return s(e,!1).then((function(e){for(var r=0;r<t.length;r++)t[r]._dbInfo.db=e})).catch((function(t){throw function(e,t){var r=j[e.name].deferredOperations.pop();r&&r.reject(t)}(e,t),t}))}function y(e,t,r){try{var n=e.db.transaction(e.storeName,t);r(null,n)}catch(n){if(!e.db||"InvalidStateError"===n.name)return h(e).then((function(){var n=e.db.transaction(e.storeName,t);r(null,n)}));r(n)}}function p(e){var t,r,n,o,i,a=.75*e.length,u=e.length,c=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var f=new ArrayBuffer(a),s=new Uint8Array(f);for(t=0;t<u;t+=4)r=N.indexOf(e[t]),n=N.indexOf(e[t+1]),o=N.indexOf(e[t+2]),i=N.indexOf(e[t+3]),s[c++]=r<<2|n>>4,s[c++]=(15&n)<<4|o>>2,s[c++]=(3&o)<<6|63&i;return f}function b(e){var t,r=new Uint8Array(e),n="";for(t=0;t<r.length;t+=3)n+=N[r[t]>>2],n+=N[(3&r[t])<<4|r[t+1]>>4],n+=N[(15&r[t+1])<<2|r[t+2]>>6],n+=N[63&r[t+2]];return r.length%3==2?n=n.substring(0,n.length-1)+"=":r.length%3==1&&(n=n.substring(0,n.length-2)+"=="),n}function g(e,t,r,n){var i=this;e=a(e);var u=new O((function(o,a){i.ready().then((function(){void 0===t&&(t=null);var u=t,c=i._dbInfo;c.serializer.serialize(t,(function(t,f){f?a(f):c.db.transaction((function(r){r.executeSql("INSERT OR REPLACE INTO "+c.storeName+" (key, value) VALUES (?, ?)",[e,t],(function(){o(u)}),(function(e,t){a(t)}))}),(function(t){if(t.code===t.QUOTA_ERR){if(n>0)return void o(g.apply(i,[e,u,r,n-1]));a(t)}}))}))})).catch(a)}));return o(u,r),u}function m(e,t){e[t]=function(){var r=arguments;return e.ready().then((function(){return e[t].apply(e,r)}))}}function _(){for(var e=1;e<arguments.length;e++){var t=arguments[e];if(t)for(var r in t)t.hasOwnProperty(r)&&(ie(t[r])?arguments[0][r]=t[r].slice():arguments[0][r]=t[r])}return arguments[0]}function w(e){for(var t in ee)if(ee.hasOwnProperty(t)&&ee[t]===e)return!0;return!1}var S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},I=function(){try{if("undefined"!=typeof indexedDB)return indexedDB;if("undefined"!=typeof webkitIndexedDB)return webkitIndexedDB;if("undefined"!=typeof mozIndexedDB)return mozIndexedDB;if("undefined"!=typeof OIndexedDB)return OIndexedDB;if("undefined"!=typeof msIndexedDB)return msIndexedDB}catch(e){}}();"undefined"==typeof Promise&&e(3);var E,j,O=Promise,x="local-forage-detect-blob-support",A=Object.prototype.toString,D="readonly",B="readwrite",R={_driver:"asyncStorage",_initStorage:function(e){function t(){return O.resolve()}var r=this,n={db:null};if(e)for(var o in e)n[o]=e[o];j||(j={});var i=j[n.name];i||(i={forages:[],db:null,dbReady:null,deferredOperations:[]},j[n.name]=i),i.forages.push(r),r._initReady||(r._initReady=r.ready,r.ready=v);for(var a=[],u=0;u<i.forages.length;u++){var c=i.forages[u];c!==r&&a.push(c._initReady().catch(t))}var f=i.forages.slice(0);return O.all(a).then((function(){return n.db=i.db,function(e){return s(e,!1)}(n)})).then((function(e){return n.db=e,function(e,t){if(!e.db)return!0;var r=!e.db.objectStoreNames.contains(e.storeName),n=e.version<e.db.version,o=e.version>e.db.version;if(n&&(e.version!==t&&console.warn('The database "'+e.name+"\" can't be downgraded from version "+e.db.version+" to version "+e.version+"."),e.version=e.db.version),o||r){if(r){var i=e.db.version+1;i>e.version&&(e.version=i)}return!0}return!1}(n,r._defaultConfig.version)?function(e){return s(e,!0)}(n):e})).then((function(e){n.db=i.db=e,r._dbInfo=n;for(var t=0;t<f.length;t++){var o=f[t];o!==r&&(o._dbInfo.db=n.db,o._dbInfo.version=n.version)}}))},iterate:function(e,t){var r=this,n=new O((function(t,n){r.ready().then((function(){y(r._dbInfo,D,(function(o,i){if(o)return n(o);try{var a=i.objectStore(r._dbInfo.storeName).openCursor(),u=1;a.onsuccess=function(){var r=a.result;if(r){var n=r.value;d(n)&&(n=l(n));var o=e(n,r.key,u++);void 0!==o?t(o):r.continue()}else t()},a.onerror=function(){n(a.error)}}catch(e){n(e)}}))})).catch(n)}));return o(n,t),n},getItem:function(e,t){var r=this;e=a(e);var n=new O((function(t,n){r.ready().then((function(){y(r._dbInfo,D,(function(o,i){if(o)return n(o);try{var a=i.objectStore(r._dbInfo.storeName).get(e);a.onsuccess=function(){var e=a.result;void 0===e&&(e=null),d(e)&&(e=l(e)),t(e)},a.onerror=function(){n(a.error)}}catch(e){n(e)}}))})).catch(n)}));return o(n,t),n},setItem:function(e,t,r){var n=this;e=a(e);var i=new O((function(r,o){var i;n.ready().then((function(){return i=n._dbInfo,"[object Blob]"===A.call(t)?c(i.db).then((function(e){return e?t:function(e){return new O((function(t,r){var n=new FileReader;n.onerror=r,n.onloadend=function(r){var n=btoa(r.target.result||"");t({__local_forage_encoded_blob:!0,data:n,type:e.type})},n.readAsBinaryString(e)}))}(t)})):t})).then((function(t){y(n._dbInfo,B,(function(i,a){if(i)return o(i);try{var u=a.objectStore(n._dbInfo.storeName).put(t,e);null===t&&(t=void 0),a.oncomplete=function(){void 0===t&&(t=null),r(t)},a.onabort=a.onerror=function(){var e=u.error?u.error:u.transaction.error;o(e)}}catch(e){o(e)}}))})).catch(o)}));return o(i,r),i},removeItem:function(e,t){var r=this;e=a(e);var n=new O((function(t,n){r.ready().then((function(){y(r._dbInfo,B,(function(o,i){if(o)return n(o);try{var a=i.objectStore(r._dbInfo.storeName).delete(e);i.oncomplete=function(){t()},i.onerror=function(){n(a.error)},i.onabort=function(){var e=a.error?a.error:a.transaction.error;n(e)}}catch(e){n(e)}}))})).catch(n)}));return o(n,t),n},clear:function(e){var t=this,r=new O((function(e,r){t.ready().then((function(){y(t._dbInfo,B,(function(n,o){if(n)return r(n);try{var i=o.objectStore(t._dbInfo.storeName).clear();o.oncomplete=function(){e()},o.onabort=o.onerror=function(){var e=i.error?i.error:i.transaction.error;r(e)}}catch(e){r(e)}}))})).catch(r)}));return o(r,e),r},length:function(e){var t=this,r=new O((function(e,r){t.ready().then((function(){y(t._dbInfo,D,(function(n,o){if(n)return r(n);try{var i=o.objectStore(t._dbInfo.storeName).count();i.onsuccess=function(){e(i.result)},i.onerror=function(){r(i.error)}}catch(e){r(e)}}))})).catch(r)}));return o(r,e),r},key:function(e,t){var r=this,n=new O((function(t,n){e<0?t(null):r.ready().then((function(){y(r._dbInfo,D,(function(o,i){if(o)return n(o);try{var a=i.objectStore(r._dbInfo.storeName),u=!1,c=a.openCursor();c.onsuccess=function(){var r=c.result;r?0===e?t(r.key):u?t(r.key):(u=!0,r.advance(e)):t(null)},c.onerror=function(){n(c.error)}}catch(e){n(e)}}))})).catch(n)}));return o(n,t),n},keys:function(e){var t=this,r=new O((function(e,r){t.ready().then((function(){y(t._dbInfo,D,(function(n,o){if(n)return r(n);try{var i=o.objectStore(t._dbInfo.storeName).openCursor(),a=[];i.onsuccess=function(){var t=i.result;t?(a.push(t.key),t.continue()):e(a)},i.onerror=function(){r(i.error)}}catch(e){r(e)}}))})).catch(r)}));return o(r,e),r}},N="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",k="~~local_forage_type~",C=/^~~local_forage_type~([^~]+)~/,T="__lfsc__:",L=T.length,M="arbf",P="blob",F="si08",z="ui08",U="uic8",W="si16",q="si32",Q="ur16",G="ui32",X="fl32",H="fl64",J=L+M.length,K=Object.prototype.toString,V={serialize:function(e,t){var r="";if(e&&(r=K.call(e)),e&&("[object ArrayBuffer]"===r||e.buffer&&"[object ArrayBuffer]"===K.call(e.buffer))){var n,o=T;e instanceof ArrayBuffer?(n=e,o+=M):(n=e.buffer,"[object Int8Array]"===r?o+=F:"[object Uint8Array]"===r?o+=z:"[object Uint8ClampedArray]"===r?o+=U:"[object Int16Array]"===r?o+=W:"[object Uint16Array]"===r?o+=Q:"[object Int32Array]"===r?o+=q:"[object Uint32Array]"===r?o+=G:"[object Float32Array]"===r?o+=X:"[object Float64Array]"===r?o+=H:t(new Error("Failed to get type for BinaryArray"))),t(o+b(n))}else if("[object Blob]"===r){var i=new FileReader;i.onload=function(){var r=k+e.type+"~"+b(this.result);t(T+P+r)},i.readAsArrayBuffer(e)}else try{t(JSON.stringify(e))}catch(r){console.error("Couldn't convert value into a JSON string: ",e),t(null,r)}},deserialize:function(e){if(e.substring(0,L)!==T)return JSON.parse(e);var t,r=e.substring(J),o=e.substring(L,J);if(o===P&&C.test(r)){var i=r.match(C);t=i[1],r=r.substring(i[0].length)}var a=p(r);switch(o){case M:return a;case P:return n([a],{type:t});case F:return new Int8Array(a);case z:return new Uint8Array(a);case U:return new Uint8ClampedArray(a);case W:return new Int16Array(a);case Q:return new Uint16Array(a);case q:return new Int32Array(a);case G:return new Uint32Array(a);case X:return new Float32Array(a);case H:return new Float64Array(a);default:throw new Error("Unkown type: "+o)}},stringToBuffer:p,bufferToString:b},Y={_driver:"webSQLStorage",_initStorage:function(e){var t=this,r={db:null};if(e)for(var n in e)r[n]="string"!=typeof e[n]?e[n].toString():e[n];var o=new O((function(e,n){try{r.db=openDatabase(r.name,String(r.version),r.description,r.size)}catch(e){return n(e)}r.db.transaction((function(o){o.executeSql("CREATE TABLE IF NOT EXISTS "+r.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],(function(){t._dbInfo=r,e()}),(function(e,t){n(t)}))}))}));return r.serializer=V,o},iterate:function(e,t){var r=this,n=new O((function(t,n){r.ready().then((function(){var o=r._dbInfo;o.db.transaction((function(r){r.executeSql("SELECT * FROM "+o.storeName,[],(function(r,n){for(var i=n.rows,a=i.length,u=0;u<a;u++){var c=i.item(u),f=c.value;if(f&&(f=o.serializer.deserialize(f)),void 0!==(f=e(f,c.key,u+1)))return void t(f)}t()}),(function(e,t){n(t)}))}))})).catch(n)}));return o(n,t),n},getItem:function(e,t){var r=this;e=a(e);var n=new O((function(t,n){r.ready().then((function(){var o=r._dbInfo;o.db.transaction((function(r){r.executeSql("SELECT * FROM "+o.storeName+" WHERE key = ? LIMIT 1",[e],(function(e,r){var n=r.rows.length?r.rows.item(0).value:null;n&&(n=o.serializer.deserialize(n)),t(n)}),(function(e,t){n(t)}))}))})).catch(n)}));return o(n,t),n},setItem:function(e,t,r){return g.apply(this,[e,t,r,1])},removeItem:function(e,t){var r=this;e=a(e);var n=new O((function(t,n){r.ready().then((function(){var o=r._dbInfo;o.db.transaction((function(r){r.executeSql("DELETE FROM "+o.storeName+" WHERE key = ?",[e],(function(){t()}),(function(e,t){n(t)}))}))})).catch(n)}));return o(n,t),n},clear:function(e){var t=this,r=new O((function(e,r){t.ready().then((function(){var n=t._dbInfo;n.db.transaction((function(t){t.executeSql("DELETE FROM "+n.storeName,[],(function(){e()}),(function(e,t){r(t)}))}))})).catch(r)}));return o(r,e),r},length:function(e){var t=this,r=new O((function(e,r){t.ready().then((function(){var n=t._dbInfo;n.db.transaction((function(t){t.executeSql("SELECT COUNT(key) as c FROM "+n.storeName,[],(function(t,r){var n=r.rows.item(0).c;e(n)}),(function(e,t){r(t)}))}))})).catch(r)}));return o(r,e),r},key:function(e,t){var r=this,n=new O((function(t,n){r.ready().then((function(){var o=r._dbInfo;o.db.transaction((function(r){r.executeSql("SELECT key FROM "+o.storeName+" WHERE id = ? LIMIT 1",[e+1],(function(e,r){var n=r.rows.length?r.rows.item(0).key:null;t(n)}),(function(e,t){n(t)}))}))})).catch(n)}));return o(n,t),n},keys:function(e){var t=this,r=new O((function(e,r){t.ready().then((function(){var n=t._dbInfo;n.db.transaction((function(t){t.executeSql("SELECT key FROM "+n.storeName,[],(function(t,r){for(var n=[],o=0;o<r.rows.length;o++)n.push(r.rows.item(o).key);e(n)}),(function(e,t){r(t)}))}))})).catch(r)}));return o(r,e),r}},Z={_driver:"localStorageWrapper",_initStorage:function(e){var t={};if(e)for(var r in e)t[r]=e[r];return t.keyPrefix=t.name+"/",t.storeName!==this._defaultConfig.storeName&&(t.keyPrefix+=t.storeName+"/"),this._dbInfo=t,t.serializer=V,O.resolve()},iterate:function(e,t){var r=this,n=r.ready().then((function(){for(var t=r._dbInfo,n=t.keyPrefix,o=n.length,i=localStorage.length,a=1,u=0;u<i;u++){var c=localStorage.key(u);if(0===c.indexOf(n)){var f=localStorage.getItem(c);if(f&&(f=t.serializer.deserialize(f)),void 0!==(f=e(f,c.substring(o),a++)))return f}}}));return o(n,t),n},getItem:function(e,t){var r=this;e=a(e);var n=r.ready().then((function(){var t=r._dbInfo,n=localStorage.getItem(t.keyPrefix+e);return n&&(n=t.serializer.deserialize(n)),n}));return o(n,t),n},setItem:function(e,t,r){var n=this;e=a(e);var i=n.ready().then((function(){void 0===t&&(t=null);var r=t;return new O((function(o,i){var a=n._dbInfo;a.serializer.serialize(t,(function(t,n){if(n)i(n);else try{localStorage.setItem(a.keyPrefix+e,t),o(r)}catch(e){"QuotaExceededError"!==e.name&&"NS_ERROR_DOM_QUOTA_REACHED"!==e.name||i(e),i(e)}}))}))}));return o(i,r),i},removeItem:function(e,t){var r=this;e=a(e);var n=r.ready().then((function(){var t=r._dbInfo;localStorage.removeItem(t.keyPrefix+e)}));return o(n,t),n},clear:function(e){var t=this,r=t.ready().then((function(){for(var e=t._dbInfo.keyPrefix,r=localStorage.length-1;r>=0;r--){var n=localStorage.key(r);0===n.indexOf(e)&&localStorage.removeItem(n)}}));return o(r,e),r},length:function(e){var t=this.keys().then((function(e){return e.length}));return o(t,e),t},key:function(e,t){var r=this,n=r.ready().then((function(){var t,n=r._dbInfo;try{t=localStorage.key(e)}catch(e){t=null}return t&&(t=t.substring(n.keyPrefix.length)),t}));return o(n,t),n},keys:function(e){var t=this,r=t.ready().then((function(){for(var e=t._dbInfo,r=localStorage.length,n=[],o=0;o<r;o++)0===localStorage.key(o).indexOf(e.keyPrefix)&&n.push(localStorage.key(o).substring(e.keyPrefix.length));return n}));return o(r,e),r}},$={},ee={INDEXEDDB:"asyncStorage",LOCALSTORAGE:"localStorageWrapper",WEBSQL:"webSQLStorage"},te=[ee.INDEXEDDB,ee.WEBSQL,ee.LOCALSTORAGE],re=["clear","getItem","iterate","key","keys","length","removeItem","setItem"],ne={description:"",driver:te.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1},oe={};oe[ee.INDEXEDDB]=function(){try{if(!I)return!1;var e="undefined"!=typeof openDatabase&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),t="function"==typeof fetch&&-1!==fetch.toString().indexOf("[native code");return(!e||t)&&"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(e){return!1}}(),oe[ee.WEBSQL]="function"==typeof openDatabase,oe[ee.LOCALSTORAGE]=function(){try{return"undefined"!=typeof localStorage&&"setItem"in localStorage&&localStorage.setItem}catch(e){return!1}}();var ie=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},ae=new(function(){function e(t){(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,e),this.INDEXEDDB=ee.INDEXEDDB,this.LOCALSTORAGE=ee.LOCALSTORAGE,this.WEBSQL=ee.WEBSQL,this._defaultConfig=_({},ne),this._config=_({},this._defaultConfig,t),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch((function(){}))}return e.prototype.config=function(e){if("object"===(void 0===e?"undefined":S(e))){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var t in e){if("storeName"===t&&(e[t]=e[t].replace(/\W/g,"_")),"version"===t&&"number"!=typeof e[t])return new Error("Database version must be a number.");this._config[t]=e[t]}return!("driver"in e&&e.driver)||this.setDriver(this._config.driver)}return"string"==typeof e?this._config[e]:this._config},e.prototype.defineDriver=function(e,t,r){var n=new O((function(t,r){try{var n=e._driver,o=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver"),i=new Error("Custom driver name already in use: "+e._driver);if(!e._driver)return void r(o);if(w(e._driver))return void r(i);for(var a=re.concat("_initStorage"),u=0;u<a.length;u++){var c=a[u];if(!c||!e[c]||"function"!=typeof e[c])return void r(o)}var f=function(r){oe[n]=r,$[n]=e,t()};"_support"in e?e._support&&"function"==typeof e._support?e._support().then(f,r):f(!!e._support):f(!0)}catch(e){r(e)}}));return i(n,t,r),n},e.prototype.driver=function(){return this._driver||null},e.prototype.getDriver=function(e,t,r){var n=this,o=O.resolve().then((function(){if(!w(e)){if($[e])return $[e];throw new Error("Driver not found.")}switch(e){case n.INDEXEDDB:return R;case n.LOCALSTORAGE:return Z;case n.WEBSQL:return Y}}));return i(o,t,r),o},e.prototype.getSerializer=function(e){var t=O.resolve(V);return i(t,e),t},e.prototype.ready=function(e){var t=this,r=t._driverSet.then((function(){return null===t._ready&&(t._ready=t._initDriver()),t._ready}));return i(r,e,e),r},e.prototype.setDriver=function(e,t,r){function n(){a._config.driver=a.driver()}function o(e){return a._extend(e),n(),a._ready=a._initStorage(a._config),a._ready}var a=this;ie(e)||(e=[e]);var u=this._getSupportedDrivers(e),c=null!==this._driverSet?this._driverSet.catch((function(){return O.resolve()})):O.resolve();return this._driverSet=c.then((function(){var e=u[0];return a._dbInfo=null,a._ready=null,a.getDriver(e).then((function(e){a._driver=e._driver,n(),a._wrapLibraryMethodsWithReady(),a._initDriver=function(e){return function(){var t=0;return function r(){for(;t<e.length;){var i=e[t];return t++,a._dbInfo=null,a._ready=null,a.getDriver(i).then(o).catch(r)}n();var u=new Error("No available storage method found.");return a._driverSet=O.reject(u),a._driverSet}()}}(u)}))})).catch((function(){n();var e=new Error("No available storage method found.");return a._driverSet=O.reject(e),a._driverSet})),i(this._driverSet,t,r),this._driverSet},e.prototype.supports=function(e){return!!oe[e]},e.prototype._extend=function(e){_(this,e)},e.prototype._getSupportedDrivers=function(e){for(var t=[],r=0,n=e.length;r<n;r++){var o=e[r];this.supports(o)&&t.push(o)}return t},e.prototype._wrapLibraryMethodsWithReady=function(){for(var e=0;e<re.length;e++)m(this,re[e])},e.prototype.createInstance=function(t){return new e(t)},e}());t.exports=ae},{3:3}]},{},[4])(4)}).call(this,r(1))},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r}])}));

/*!
 * Bowser - a browser detector
 * https://github.com/ded/bowser
 * MIT License | (c) Dustin Diaz 2015
 */
!function(e,t,n){typeof module!="undefined"&&module.exports?module.exports=n():typeof define=="function"&&define.amd?define(t,n):e[t]=n()}(this,"bowser",function(){function t(t){function n(e){var n=t.match(e);return n&&n.length>1&&n[1]||""}function r(e){var n=t.match(e);return n&&n.length>1&&n[2]||""}function N(e){switch(e){case"NT":return"NT";case"XP":return"XP";case"NT 5.0":return"2000";case"NT 5.1":return"XP";case"NT 5.2":return"2003";case"NT 6.0":return"Vista";case"NT 6.1":return"7";case"NT 6.2":return"8";case"NT 6.3":return"8.1";case"NT 10.0":return"10";default:return undefined}}var i=n(/(ipod|iphone|ipad)/i).toLowerCase(),s=/like android/i.test(t),o=!s&&/android/i.test(t),u=/nexus\s*[0-6]\s*/i.test(t),a=!u&&/nexus\s*[0-9]+/i.test(t),f=/CrOS/.test(t),l=/silk/i.test(t),c=/sailfish/i.test(t),h=/tizen/i.test(t),p=/(web|hpw)os/i.test(t),d=/windows phone/i.test(t),v=/SamsungBrowser/i.test(t),m=!d&&/windows/i.test(t),g=!i&&!l&&/macintosh/i.test(t),y=!o&&!c&&!h&&!p&&/linux/i.test(t),b=n(/edge\/(\d+(\.\d+)?)/i),w=n(/version\/(\d+(\.\d+)?)/i),E=/tablet/i.test(t)&&!/tablet pc/i.test(t),S=!E&&/[^-]mobi/i.test(t),x=/xbox/i.test(t),T;/opera/i.test(t)?T={name:"Opera",opera:e,version:w||n(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)}:/opr|opios/i.test(t)?T={name:"Opera",opera:e,version:n(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i)||w}:/SamsungBrowser/i.test(t)?T={name:"Samsung Internet for Android",samsungBrowser:e,version:w||n(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)}:/coast/i.test(t)?T={name:"Opera Coast",coast:e,version:w||n(/(?:coast)[\s\/](\d+(\.\d+)?)/i)}:/yabrowser/i.test(t)?T={name:"Yandex Browser",yandexbrowser:e,version:w||n(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)}:/ucbrowser/i.test(t)?T={name:"UC Browser",ucbrowser:e,version:n(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)}:/mxios/i.test(t)?T={name:"Maxthon",maxthon:e,version:n(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)}:/epiphany/i.test(t)?T={name:"Epiphany",epiphany:e,version:n(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)}:/puffin/i.test(t)?T={name:"Puffin",puffin:e,version:n(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)}:/sleipnir/i.test(t)?T={name:"Sleipnir",sleipnir:e,version:n(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)}:/k-meleon/i.test(t)?T={name:"K-Meleon",kMeleon:e,version:n(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)}:d?(T={name:"Windows Phone",windowsphone:e},b?(T.msedge=e,T.version=b):(T.msie=e,T.version=n(/iemobile\/(\d+(\.\d+)?)/i))):/msie|trident/i.test(t)?T={name:"Internet Explorer",msie:e,version:n(/(?:msie |rv:)(\d+(\.\d+)?)/i)}:f?T={name:"Chrome",chromeos:e,chromeBook:e,chrome:e,version:n(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)}:/chrome.+? edge/i.test(t)?T={name:"Microsoft Edge",msedge:e,version:b}:/vivaldi/i.test(t)?T={name:"Vivaldi",vivaldi:e,version:n(/vivaldi\/(\d+(\.\d+)?)/i)||w}:c?T={name:"Sailfish",sailfish:e,version:n(/sailfish\s?browser\/(\d+(\.\d+)?)/i)}:/seamonkey\//i.test(t)?T={name:"SeaMonkey",seamonkey:e,version:n(/seamonkey\/(\d+(\.\d+)?)/i)}:/firefox|iceweasel|fxios/i.test(t)?(T={name:"Firefox",firefox:e,version:n(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)},/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(t)&&(T.firefoxos=e)):l?T={name:"Amazon Silk",silk:e,version:n(/silk\/(\d+(\.\d+)?)/i)}:/phantom/i.test(t)?T={name:"PhantomJS",phantom:e,version:n(/phantomjs\/(\d+(\.\d+)?)/i)}:/slimerjs/i.test(t)?T={name:"SlimerJS",slimer:e,version:n(/slimerjs\/(\d+(\.\d+)?)/i)}:/blackberry|\bbb\d+/i.test(t)||/rim\stablet/i.test(t)?T={name:"BlackBerry",blackberry:e,version:w||n(/blackberry[\d]+\/(\d+(\.\d+)?)/i)}:p?(T={name:"WebOS",webos:e,version:w||n(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)},/touchpad\//i.test(t)&&(T.touchpad=e)):/bada/i.test(t)?T={name:"Bada",bada:e,version:n(/dolfin\/(\d+(\.\d+)?)/i)}:h?T={name:"Tizen",tizen:e,version:n(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i)||w}:/qupzilla/i.test(t)?T={name:"QupZilla",qupzilla:e,version:n(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i)||w}:/chromium/i.test(t)?T={name:"Chromium",chromium:e,version:n(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i)||w}:/chrome|crios|crmo/i.test(t)?T={name:"Chrome",chrome:e,version:n(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)}:o?T={name:"Android",version:w}:/safari|applewebkit/i.test(t)?(T={name:"Safari",safari:e},w&&(T.version=w)):i?(T={name:i=="iphone"?"iPhone":i=="ipad"?"iPad":"iPod"},w&&(T.version=w)):/googlebot/i.test(t)?T={name:"Googlebot",googlebot:e,version:n(/googlebot\/(\d+(\.\d+))/i)||w}:T={name:n(/^(.*)\/(.*) /),version:r(/^(.*)\/(.*) /)},!T.msedge&&/(apple)?webkit/i.test(t)?(/(apple)?webkit\/537\.36/i.test(t)?(T.name=T.name||"Blink",T.blink=e):(T.name=T.name||"Webkit",T.webkit=e),!T.version&&w&&(T.version=w)):!T.opera&&/gecko\//i.test(t)&&(T.name=T.name||"Gecko",T.gecko=e,T.version=T.version||n(/gecko\/(\d+(\.\d+)?)/i)),!T.windowsphone&&!T.msedge&&(o||T.silk)?T.android=e:!T.windowsphone&&!T.msedge&&i?(T[i]=e,T.ios=e):g?T.mac=e:x?T.xbox=e:m?T.windows=e:y&&(T.linux=e);var C="";T.windows?C=N(n(/Windows ((NT|XP)( \d\d?.\d)?)/i)):T.windowsphone?C=n(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i):T.mac?(C=n(/Mac OS X (\d+([_\.\s]\d+)*)/i),C=C.replace(/[_\s]/g,".")):i?(C=n(/os (\d+([_\s]\d+)*) like mac os x/i),C=C.replace(/[_\s]/g,".")):o?C=n(/android[ \/-](\d+(\.\d+)*)/i):T.webos?C=n(/(?:web|hpw)os\/(\d+(\.\d+)*)/i):T.blackberry?C=n(/rim\stablet\sos\s(\d+(\.\d+)*)/i):T.bada?C=n(/bada\/(\d+(\.\d+)*)/i):T.tizen&&(C=n(/tizen[\/\s](\d+(\.\d+)*)/i)),C&&(T.osversion=C);var k=!T.windows&&C.split(".")[0];if(E||a||i=="ipad"||o&&(k==3||k>=4&&!S)||T.silk)T.tablet=e;else if(S||i=="iphone"||i=="ipod"||o||u||T.blackberry||T.webos||T.bada)T.mobile=e;return T.msedge||T.msie&&T.version>=10||T.yandexbrowser&&T.version>=15||T.vivaldi&&T.version>=1||T.chrome&&T.version>=20||T.samsungBrowser&&T.version>=4||T.firefox&&T.version>=20||T.safari&&T.version>=6||T.opera&&T.version>=10||T.ios&&T.osversion&&T.osversion.split(".")[0]>=6||T.blackberry&&T.version>=10.1||T.chromium&&T.version>=20?T.a=e:T.msie&&T.version<10||T.chrome&&T.version<20||T.firefox&&T.version<20||T.safari&&T.version<6||T.opera&&T.version<10||T.ios&&T.osversion&&T.osversion.split(".")[0]<6||T.chromium&&T.version<20?T.c=e:T.x=e,T}function r(e){return e.split(".").length}function i(e,t){var n=[],r;if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r++)n.push(t(e[r]));return n}function s(e){var t=Math.max(r(e[0]),r(e[1])),n=i(e,function(e){var n=t-r(e);return e+=(new Array(n+1)).join(".0"),i(e.split("."),function(e){return(new Array(20-e.length)).join("0")+e}).reverse()});while(--t>=0){if(n[0][t]>n[1][t])return 1;if(n[0][t]!==n[1][t])return-1;if(t===0)return 0}}function o(e,r,i){var o=n;typeof r=="string"&&(i=r,r=void 0),r===void 0&&(r=!1),i&&(o=t(i));var u=""+o.version;for(var a in e)if(e.hasOwnProperty(a)&&o[a]){if(typeof e[a]!="string")throw new Error("Browser version in the minVersion map should be a string: "+a+": "+String(e));return s([u,e[a]])<0}return r}function u(e,t,n){return!o(e,t,n)}var e=!0,n=t(typeof navigator!="undefined"?navigator.userAgent||"":"");return n.test=function(e){for(var t=0;t<e.length;++t){var r=e[t];if(typeof r=="string"&&r in n)return!0}return!1},n.isUnsupportedBrowser=o,n.compareVersions=s,n.check=u,n._detect=t,n})
var db = new rdDbCenter();
var RDActive = new RelatedPushSdk();
RDActive.initSettings();